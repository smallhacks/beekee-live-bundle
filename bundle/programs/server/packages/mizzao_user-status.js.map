{"version":3,"sources":["meteor://ðŸ’»app/packages/mizzao:user-status/server/status.js"],"names":["module","export","UserStatus","StatusInternals","Accounts","link","v","check","Match","Meteor","Mongo","_","EventEmitter","UserConnections","Collection","connection","statusEvents","on","advice","update","$set","date","loginTime","ipAddr","userAgent","conns","find","userId","fetch","every","c","idle","$unset","users","length","lastActivity","max","pluck","onStartup","selector","multi","addSession","upsert","id","clientAddress","httpHeaders","loginSession","emit","connectionId","tryLogoutSession","conn","findOne","_id","$exists","logoutTime","removeSession","remove","idleSession","activeSession","startup","onConnection","onClose","Date","onLogin","info","user","publish","_session","connectionHandle","methods","timestamp","OneOf","undefined","Number","connections","events"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,YAAU,EAAC,MAAIA,UAAhB;AAA2BC,iBAAe,EAAC,MAAIA;AAA/C,CAAd;AAA+E,IAAIC,QAAJ;AAAaJ,MAAM,CAACK,IAAP,CAAY,sBAAZ,EAAmC;AAACD,UAAQ,CAACE,CAAD,EAAG;AAACF,YAAQ,GAACE,CAAT;AAAW;;AAAxB,CAAnC,EAA6D,CAA7D;AAAgE,IAAIC,KAAJ,EAAUC,KAAV;AAAgBR,MAAM,CAACK,IAAP,CAAY,cAAZ,EAA2B;AAACE,OAAK,CAACD,CAAD,EAAG;AAACC,SAAK,GAACD,CAAN;AAAQ,GAAlB;;AAAmBE,OAAK,CAACF,CAAD,EAAG;AAACE,SAAK,GAACF,CAAN;AAAQ;;AAApC,CAA3B,EAAiE,CAAjE;AAAoE,IAAIG,MAAJ;AAAWT,MAAM,CAACK,IAAP,CAAY,eAAZ,EAA4B;AAACI,QAAM,CAACH,CAAD,EAAG;AAACG,UAAM,GAACH,CAAP;AAAS;;AAApB,CAA5B,EAAkD,CAAlD;AAAqD,IAAII,KAAJ;AAAUV,MAAM,CAACK,IAAP,CAAY,cAAZ,EAA2B;AAACK,OAAK,CAACJ,CAAD,EAAG;AAACI,SAAK,GAACJ,CAAN;AAAQ;;AAAlB,CAA3B,EAA+C,CAA/C;;AAAkD,IAAIK,CAAJ;;AAAMX,MAAM,CAACK,IAAP,CAAY,mBAAZ,EAAgC;AAACM,GAAC,CAACL,CAAD,EAAG;AAACK,KAAC,GAACL,CAAF;AAAI;;AAAV,CAAhC,EAA4C,CAA5C;AAA+C,IAAIM,YAAJ;AAAiBZ,MAAM,CAACK,IAAP,CAAY,QAAZ,EAAqB;AAACO,cAAY,CAACN,CAAD,EAAG;AAACM,gBAAY,GAACN,CAAb;AAAe;;AAAhC,CAArB,EAAuD,CAAvD;AAclb,MAAMO,eAAe,GAAG,IAAIH,KAAK,CAACI,UAAV,CAAqB,sBAArB,EAA6C;AACnEC,YAAU,EAAE;AADuD,CAA7C,CAAxB;AAIA,MAAMC,YAAY,GAAG,IAAIJ,YAAJ,EAArB;AAEA;;;;;;;;;;;AAUAI,YAAY,CAACC,EAAb,CAAgB,iBAAhB,EAAoCC,MAAD,IAAY;AAC7C,QAAMC,MAAM,GAAG;AACbC,QAAI,EAAE;AACJ,uBAAiB,IADb;AAEJ,0BAAoB;AAClBC,YAAI,EAAEH,MAAM,CAACI,SADK;AAElBC,cAAM,EAAEL,MAAM,CAACK,MAFG;AAGlBC,iBAAS,EAAEN,MAAM,CAACM;AAHA;AAFhB;AADO,GAAf,CAD6C,CAY7C;AACA;;AACA,QAAMC,KAAK,GAAGZ,eAAe,CAACa,IAAhB,CAAqB;AACjCC,UAAM,EAAET,MAAM,CAACS;AADkB,GAArB,EAEXC,KAFW,EAAd;;AAGA,MAAI,CAACjB,CAAC,CAACkB,KAAF,CAAQJ,KAAR,EAAeK,CAAC,IAAIA,CAAC,CAACC,IAAtB,CAAL,EAAkC;AAChCZ,UAAM,CAACC,IAAP,CAAY,aAAZ,IAA6B,KAA7B;AACAD,UAAM,CAACa,MAAP,GAAgB;AACd,6BAAuB;AADT,KAAhB;AAGD,GAtB4C,CAuB7C;;;AAEAvB,QAAM,CAACwB,KAAP,CAAad,MAAb,CAAoBD,MAAM,CAACS,MAA3B,EAAmCR,MAAnC;AACD,CA1BD;AA4BAH,YAAY,CAACC,EAAb,CAAgB,kBAAhB,EAAqCC,MAAD,IAAY;AAC9C,QAAMO,KAAK,GAAGZ,eAAe,CAACa,IAAhB,CAAqB;AACjCC,UAAM,EAAET,MAAM,CAACS;AADkB,GAArB,EAEXC,KAFW,EAAd;;AAGA,MAAIH,KAAK,CAACS,MAAN,KAAiB,CAArB,EAAwB;AACtB;AACA;AACAzB,UAAM,CAACwB,KAAP,CAAad,MAAb,CAAoBD,MAAM,CAACS,MAA3B,EAAmC;AACjCP,UAAI,EAAE;AACJ,yBAAiB;AADb,OAD2B;AAIjCY,YAAM,EAAE;AACN,uBAAe,IADT;AAEN,+BAAuB;AAFjB;AAJyB,KAAnC;AASD,GAZD,MAYO,IAAIrB,CAAC,CAACkB,KAAF,CAAQJ,KAAR,EAAeK,CAAC,IAAIA,CAAC,CAACC,IAAtB,CAAJ,EAAiC;AACtC;;;;;;;AAQA,QAAIb,MAAM,CAACiB,YAAP,IAAuB,IAA3B,EAAiC;AAC/B;AACD,KAXqC,CAWpC;;;AAEF1B,UAAM,CAACwB,KAAP,CAAad,MAAb,CAAoBD,MAAM,CAACS,MAA3B,EAAmC;AACjCP,UAAI,EAAE;AACJ,uBAAe,IADX;AAEJ,+BAAuBT,CAAC,CAACyB,GAAF,CAAMzB,CAAC,CAAC0B,KAAF,CAAQZ,KAAR,EAAe,cAAf,CAAN;AAFnB;AAD2B,KAAnC;AAMD;AACF,CApCD;AAsCA;;;;;;;;AAOAT,YAAY,CAACC,EAAb,CAAgB,gBAAhB,EAAmCC,MAAD,IAAY;AAC5C,QAAMO,KAAK,GAAGZ,eAAe,CAACa,IAAhB,CAAqB;AACjCC,UAAM,EAAET,MAAM,CAACS;AADkB,GAArB,EAEXC,KAFW,EAAd;;AAGA,MAAI,CAACjB,CAAC,CAACkB,KAAF,CAAQJ,KAAR,EAAeK,CAAC,IAAIA,CAAC,CAACC,IAAtB,CAAL,EAAkC;AAChC;AACD,GAN2C,CAO5C;AACA;AAEA;;;AACAtB,QAAM,CAACwB,KAAP,CAAad,MAAb,CAAoBD,MAAM,CAACS,MAA3B,EAAmC;AACjCP,QAAI,EAAE;AACJ,qBAAe,IADX;AAEJ,6BAAuBT,CAAC,CAACyB,GAAF,CAAMzB,CAAC,CAAC0B,KAAF,CAAQZ,KAAR,EAAe,cAAf,CAAN;AAFnB;AAD2B,GAAnC;AAMD,CAjBD;AAmBAT,YAAY,CAACC,EAAb,CAAgB,kBAAhB,EAAqCC,MAAD,IAAY;AAC9CT,QAAM,CAACwB,KAAP,CAAad,MAAb,CAAoBD,MAAM,CAACS,MAA3B,EAAmC;AACjCP,QAAI,EAAE;AACJ,qBAAe;AADX,KAD2B;AAIjCY,UAAM,EAAE;AACN,6BAAuB;AADjB;AAJyB,GAAnC;AAQD,CATD,E,CAWA;;AACA,MAAMM,SAAS,GAAIC,QAAD,IAAc;AAC9B,MAAIA,QAAQ,IAAI,IAAhB,EAAsB;AACpBA,YAAQ,GAAG,EAAX;AACD;;AACD,SAAO9B,MAAM,CAACwB,KAAP,CAAad,MAAb,CAAoBoB,QAApB,EAA8B;AACnCnB,QAAI,EAAE;AACJ,uBAAiB;AADb,KAD6B;AAInCY,UAAM,EAAE;AACN,qBAAe,IADT;AAEN,6BAAuB;AAFjB;AAJ2B,GAA9B,EAQJ;AACDQ,SAAK,EAAE;AADN,GARI,CAAP;AAWD,CAfD;AAiBA;;;;;AAIA,MAAMC,UAAU,GAAI1B,UAAD,IAAgB;AACjCF,iBAAe,CAAC6B,MAAhB,CAAuB3B,UAAU,CAAC4B,EAAlC,EAAsC;AACpCvB,QAAI,EAAE;AACJG,YAAM,EAAER,UAAU,CAAC6B,aADf;AAEJpB,eAAS,EAAET,UAAU,CAAC8B,WAAX,CAAuB,YAAvB;AAFP;AAD8B,GAAtC;AAMD,CAPD;;AASA,MAAMC,YAAY,GAAG,CAAC/B,UAAD,EAAaM,IAAb,EAAmBM,MAAnB,KAA8B;AACjDd,iBAAe,CAAC6B,MAAhB,CAAuB3B,UAAU,CAAC4B,EAAlC,EAAsC;AACpCvB,QAAI,EAAE;AACJO,YADI;AAEJL,eAAS,EAAED;AAFP;AAD8B,GAAtC;AAOAL,cAAY,CAAC+B,IAAb,CAAkB,iBAAlB,EAAqC;AACnCpB,UADmC;AAEnCqB,gBAAY,EAAEjC,UAAU,CAAC4B,EAFU;AAGnCpB,UAAM,EAAER,UAAU,CAAC6B,aAHgB;AAInCpB,aAAS,EAAET,UAAU,CAAC8B,WAAX,CAAuB,YAAvB,CAJwB;AAKnCvB,aAAS,EAAED;AALwB,GAArC;AAOD,CAfD,C,CAiBA;;;AACA,MAAM4B,gBAAgB,GAAG,CAAClC,UAAD,EAAaM,IAAb,KAAsB;AAC7C,MAAI6B,IAAJ;;AACA,MAAI,CAACA,IAAI,GAAGrC,eAAe,CAACsC,OAAhB,CAAwB;AAChCC,OAAG,EAAErC,UAAU,CAAC4B,EADgB;AAEhChB,UAAM,EAAE;AACN0B,aAAO,EAAE;AADH;AAFwB,GAAxB,CAAR,KAKK,IALT,EAKe;AACb,WAAO,KAAP;AACD,GAT4C,CAW7C;;;AACAxC,iBAAe,CAAC6B,MAAhB,CAAuB3B,UAAU,CAAC4B,EAAlC,EAAsC;AACpCX,UAAM,EAAE;AACNL,YAAM,EAAE,IADF;AAENL,eAAS,EAAE;AAFL;AAD4B,GAAtC;AAOA,SAAON,YAAY,CAAC+B,IAAb,CAAkB,kBAAlB,EAAsC;AAC3CpB,UAAM,EAAEuB,IAAI,CAACvB,MAD8B;AAE3CqB,gBAAY,EAAEjC,UAAU,CAAC4B,EAFkB;AAG3CR,gBAAY,EAAEe,IAAI,CAACf,YAHwB;AAGV;AACjCmB,cAAU,EAAEjC;AAJ+B,GAAtC,CAAP;AAMD,CAzBD;;AA2BA,MAAMkC,aAAa,GAAG,CAACxC,UAAD,EAAaM,IAAb,KAAsB;AAC1C4B,kBAAgB,CAAClC,UAAD,EAAaM,IAAb,CAAhB;AACAR,iBAAe,CAAC2C,MAAhB,CAAuBzC,UAAU,CAAC4B,EAAlC;AACD,CAHD;;AAKA,MAAMc,WAAW,GAAG,CAAC1C,UAAD,EAAaM,IAAb,EAAmBM,MAAnB,KAA8B;AAChDd,iBAAe,CAACM,MAAhB,CAAuBJ,UAAU,CAAC4B,EAAlC,EAAsC;AACpCvB,QAAI,EAAE;AACJW,UAAI,EAAE,IADF;AAEJI,kBAAY,EAAEd;AAFV;AAD8B,GAAtC;AAOAL,cAAY,CAAC+B,IAAb,CAAkB,gBAAlB,EAAoC;AAClCpB,UADkC;AAElCqB,gBAAY,EAAEjC,UAAU,CAAC4B,EAFS;AAGlCR,gBAAY,EAAEd;AAHoB,GAApC;AAKD,CAbD;;AAeA,MAAMqC,aAAa,GAAG,CAAC3C,UAAD,EAAaM,IAAb,EAAmBM,MAAnB,KAA8B;AAClDd,iBAAe,CAACM,MAAhB,CAAuBJ,UAAU,CAAC4B,EAAlC,EAAsC;AACpCvB,QAAI,EAAE;AACJW,UAAI,EAAE;AADF,KAD8B;AAIpCC,UAAM,EAAE;AACNG,kBAAY,EAAE;AADR;AAJ4B,GAAtC;AASAnB,cAAY,CAAC+B,IAAb,CAAkB,kBAAlB,EAAsC;AACpCpB,UADoC;AAEpCqB,gBAAY,EAAEjC,UAAU,CAAC4B,EAFW;AAGpCR,gBAAY,EAAEd;AAHsB,GAAtC;AAKD,CAfD;AAiBA;;;;;AAGAZ,MAAM,CAACkD,OAAP,CAAerB,SAAf,E,CAEA;;AACA7B,MAAM,CAACmD,YAAP,CAAqB7C,UAAD,IAAgB;AAClC0B,YAAU,CAAC1B,UAAD,CAAV;AAEA,SAAOA,UAAU,CAAC8C,OAAX,CAAmB,MAAMN,aAAa,CAACxC,UAAD,EAAa,IAAI+C,IAAJ,EAAb,CAAtC,CAAP;AACD,CAJD,E,CAMA;;AACA1D,QAAQ,CAAC2D,OAAT,CAAiBC,IAAI,IAAIlB,YAAY,CAACkB,IAAI,CAACjD,UAAN,EAAkB,IAAI+C,IAAJ,EAAlB,EAA8BE,IAAI,CAACC,IAAL,CAAUb,GAAxC,CAArC,E,CAEA;AACA;;AACA3C,MAAM,CAACyD,OAAP,CAAe,IAAf,EAAqB,YAAY;AAC/B;AACA;AACA,MAAI,KAAKC,QAAL,IAAiB,IAArB,EAA2B;AACzB,WAAO,EAAP;AACD,GAL8B,CAO/B;;;AACA,MAAI,KAAKxC,MAAL,IAAe,IAAnB,EAAyB;AACvBsB,oBAAgB,CAAC,KAAKkB,QAAL,CAAcC,gBAAf,EAAiC,IAAIN,IAAJ,EAAjC,CAAhB;AACD;;AAED,SAAO,EAAP;AACD,CAbD,E,CAeA;AACA;AACA;;AACArD,MAAM,CAAC4D,OAAP,CAAe;AACb,qBAAmBC,SAAnB,EAA8B;AAC5B/D,SAAK,CAAC+D,SAAD,EAAY9D,KAAK,CAAC+D,KAAN,CAAY,IAAZ,EAAkBC,SAAlB,EAA6BV,IAA7B,EAAmCW,MAAnC,CAAZ,CAAL;AAEA,UAAMpD,IAAI,GAAIiD,SAAS,IAAI,IAAd,GAAsB,IAAIR,IAAJ,CAASQ,SAAT,CAAtB,GAA4C,IAAIR,IAAJ,EAAzD;AACAL,eAAW,CAAC,KAAK1C,UAAN,EAAkBM,IAAlB,EAAwB,KAAKM,MAA7B,CAAX;AACD,GANY;;AAQb,uBAAqB2C,SAArB,EAAgC;AAC9B/D,SAAK,CAAC+D,SAAD,EAAY9D,KAAK,CAAC+D,KAAN,CAAY,IAAZ,EAAkBC,SAAlB,EAA6BV,IAA7B,EAAmCW,MAAnC,CAAZ,CAAL,CAD8B,CAG9B;AACA;AACA;;AACA,UAAMpD,IAAI,GAAIiD,SAAS,IAAI,IAAd,GAAsB,IAAIR,IAAJ,CAASQ,SAAT,CAAtB,GAA4C,IAAIR,IAAJ,EAAzD;AACAJ,iBAAa,CAAC,KAAK3C,UAAN,EAAkBM,IAAlB,EAAwB,KAAKM,MAA7B,CAAb;AACD;;AAhBY,CAAf,E,CAmBA;;AACO,MAAMzB,UAAU,GAAG;AACxBwE,aAAW,EAAE7D,eADW;AAExB8D,QAAM,EAAE3D;AAFgB,CAAnB;AAMA,MAAMb,eAAe,GAAG;AAC7BmC,WAD6B;AAE7BG,YAF6B;AAG7Bc,eAH6B;AAI7BT,cAJ6B;AAK7BG,kBAL6B;AAM7BQ,aAN6B;AAO7BC;AAP6B,CAAxB,C","file":"/packages/mizzao_user-status.js","sourcesContent":["/*\n  Apparently, the new api.export takes care of issues here. No need to attach to global namespace.\n  See http://shiggyenterprises.wordpress.com/2013/09/09/meteor-packages-in-coffeescript-0-6-5/\n\n  We may want to make UserSessions a server collection to take advantage of indices.\n  Will implement if someone has enough online users to warrant it.\n*/\nimport { Accounts } from 'meteor/accounts-base';\nimport { check, Match } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { _ } from 'meteor/underscore';\nimport { EventEmitter } from 'events';\n\nconst UserConnections = new Mongo.Collection('user_status_sessions', {\n  connection: null\n});\n\nconst statusEvents = new(EventEmitter)();\n\n/*\n  Multiplex login/logout events to status.online\n\n  'online' field is \"true\" if user is online, and \"false\" otherwise\n\n  'idle' field is tri-stated:\n  - \"true\" if user is online and not idle\n  - \"false\" if user is online and idle\n  - null if user is offline\n*/\nstatusEvents.on('connectionLogin', (advice) => {\n  const update = {\n    $set: {\n      'status.online': true,\n      'status.lastLogin': {\n        date: advice.loginTime,\n        ipAddr: advice.ipAddr,\n        userAgent: advice.userAgent\n      }\n    }\n  };\n\n  // unless ALL existing connections are idle (including this new one),\n  // the user connection becomes active.\n  const conns = UserConnections.find({\n    userId: advice.userId\n  }).fetch();\n  if (!_.every(conns, c => c.idle)) {\n    update.$set['status.idle'] = false;\n    update.$unset = {\n      'status.lastActivity': null\n    };\n  }\n  // in other case, idle field remains true and no update to lastActivity.\n\n  Meteor.users.update(advice.userId, update);\n});\n\nstatusEvents.on('connectionLogout', (advice) => {\n  const conns = UserConnections.find({\n    userId: advice.userId\n  }).fetch();\n  if (conns.length === 0) {\n    // Go offline if we are the last connection for this user\n    // This includes removing all idle information\n    Meteor.users.update(advice.userId, {\n      $set: {\n        'status.online': false\n      },\n      $unset: {\n        'status.idle': null,\n        'status.lastActivity': null\n      }\n    });\n  } else if (_.every(conns, c => c.idle)) {\n    /*\n      All remaining connections are idle:\n      - If the last active connection quit, then we should go idle with the most recent activity\n\n      - If an idle connection quit, nothing should happen; specifically, if the\n        most recently active idle connection quit, we shouldn't tick the value backwards.\n        This may result in a no-op so we can be smart and skip the update.\n    */\n    if (advice.lastActivity != null) {\n      return;\n    } // The dropped connection was already idle\n\n    Meteor.users.update(advice.userId, {\n      $set: {\n        'status.idle': true,\n        'status.lastActivity': _.max(_.pluck(conns, 'lastActivity'))\n      }\n    });\n  }\n});\n\n/*\n  Multiplex idle/active events to status.idle\n  TODO: Hopefully this is quick because it's all in memory, but we can use indices if it turns out to be slow\n\n  TODO: There is a race condition when switching between tabs, leaving the user inactive while idle goes from one tab to the other.\n  It can probably be smoothed out.\n*/\nstatusEvents.on('connectionIdle', (advice) => {\n  const conns = UserConnections.find({\n    userId: advice.userId\n  }).fetch();\n  if (!_.every(conns, c => c.idle)) {\n    return;\n  }\n  // Set user to idle if all the connections are idle\n  // This will not be the most recent idle across a disconnection, so we use max\n\n  // TODO: the race happens here where everyone was idle when we looked for them but now one of them isn't.\n  Meteor.users.update(advice.userId, {\n    $set: {\n      'status.idle': true,\n      'status.lastActivity': _.max(_.pluck(conns, 'lastActivity'))\n    }\n  });\n});\n\nstatusEvents.on('connectionActive', (advice) => {\n  Meteor.users.update(advice.userId, {\n    $set: {\n      'status.idle': false\n    },\n    $unset: {\n      'status.lastActivity': null\n    }\n  });\n});\n\n// Reset online status on startup (users will reconnect)\nconst onStartup = (selector) => {\n  if (selector == null) {\n    selector = {};\n  }\n  return Meteor.users.update(selector, {\n    $set: {\n      'status.online': false\n    },\n    $unset: {\n      'status.idle': null,\n      'status.lastActivity': null\n    }\n  }, {\n    multi: true\n  });\n};\n\n/*\n  Local session modification functions - also used in testing\n*/\n\nconst addSession = (connection) => {\n  UserConnections.upsert(connection.id, {\n    $set: {\n      ipAddr: connection.clientAddress,\n      userAgent: connection.httpHeaders['user-agent']\n    }\n  });\n};\n\nconst loginSession = (connection, date, userId) => {\n  UserConnections.upsert(connection.id, {\n    $set: {\n      userId,\n      loginTime: date\n    }\n  });\n\n  statusEvents.emit('connectionLogin', {\n    userId,\n    connectionId: connection.id,\n    ipAddr: connection.clientAddress,\n    userAgent: connection.httpHeaders['user-agent'],\n    loginTime: date\n  });\n};\n\n// Possibly trigger a logout event if this connection was previously associated with a user ID\nconst tryLogoutSession = (connection, date) => {\n  let conn;\n  if ((conn = UserConnections.findOne({\n      _id: connection.id,\n      userId: {\n        $exists: true\n      }\n    })) == null) {\n    return false;\n  }\n\n  // Yes, this is actually a user logging out.\n  UserConnections.upsert(connection.id, {\n    $unset: {\n      userId: null,\n      loginTime: null\n    }\n  });\n\n  return statusEvents.emit('connectionLogout', {\n    userId: conn.userId,\n    connectionId: connection.id,\n    lastActivity: conn.lastActivity, // If this connection was idle, pass the last activity we saw\n    logoutTime: date\n  });\n};\n\nconst removeSession = (connection, date) => {\n  tryLogoutSession(connection, date);\n  UserConnections.remove(connection.id);\n};\n\nconst idleSession = (connection, date, userId) => {\n  UserConnections.update(connection.id, {\n    $set: {\n      idle: true,\n      lastActivity: date\n    }\n  });\n\n  statusEvents.emit('connectionIdle', {\n    userId,\n    connectionId: connection.id,\n    lastActivity: date\n  });\n};\n\nconst activeSession = (connection, date, userId) => {\n  UserConnections.update(connection.id, {\n    $set: {\n      idle: false\n    },\n    $unset: {\n      lastActivity: null\n    }\n  });\n\n  statusEvents.emit('connectionActive', {\n    userId,\n    connectionId: connection.id,\n    lastActivity: date\n  });\n};\n\n/*\n  Handlers for various client-side events\n*/\nMeteor.startup(onStartup);\n\n// Opening and closing of DDP connections\nMeteor.onConnection((connection) => {\n  addSession(connection);\n\n  return connection.onClose(() => removeSession(connection, new Date()));\n});\n\n// Authentication of a DDP connection\nAccounts.onLogin(info => loginSession(info.connection, new Date(), info.user._id));\n\n// pub/sub trick as referenced in http://stackoverflow.com/q/10257958/586086\n// We used this in the past, but still need this to detect logouts on the same connection.\nMeteor.publish(null, function () {\n  // Return null explicitly if this._session is not available, i.e.:\n  // https://github.com/arunoda/meteor-fast-render/issues/41\n  if (this._session == null) {\n    return [];\n  }\n\n  // We're interested in logout events - re-publishes for which a past connection exists\n  if (this.userId == null) {\n    tryLogoutSession(this._session.connectionHandle, new Date());\n  }\n\n  return [];\n});\n\n// We can use the client's timestamp here because it was sent from a TimeSync\n// value, however we should never trust it for something security dependent.\n// If timestamp is not provided (probably due to a desync), use server time.\nMeteor.methods({\n  'user-status-idle'(timestamp) {\n    check(timestamp, Match.OneOf(null, undefined, Date, Number));\n\n    const date = (timestamp != null) ? new Date(timestamp) : new Date();\n    idleSession(this.connection, date, this.userId);\n  },\n\n  'user-status-active'(timestamp) {\n    check(timestamp, Match.OneOf(null, undefined, Date, Number));\n\n    // We only use timestamp because it's when we saw activity *on the client*\n    // as opposed to just being notified it. It is probably more accurate even if\n    // a dozen ms off due to the latency of sending it to the server.\n    const date = (timestamp != null) ? new Date(timestamp) : new Date();\n    activeSession(this.connection, date, this.userId);\n  }\n});\n\n// Exported variable\nexport const UserStatus = {\n  connections: UserConnections,\n  events: statusEvents\n};\n\n// Internal functions, exported for testing\nexport const StatusInternals = {\n  onStartup,\n  addSession,\n  removeSession,\n  loginSession,\n  tryLogoutSession,\n  idleSession,\n  activeSession,\n};\n"]}